/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulacion;

import java.awt.BorderLayout;
import java.io.FileWriter;
import java.io.PrintWriter;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Noel Roberto
 */
public class LlenadoProbabilidades extends javax.swing.JPanel {
    DefaultTableModel tell;
    DefaultTableModel tss;

    /**
     * Creates new form LlenadoProbabilidades
     */
    public LlenadoProbabilidades() {
        initComponents();
        tell=(DefaultTableModel)this.tableTELL.getModel();
        tss=(DefaultTableModel)this.tableTS.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableTELL = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTS = new javax.swing.JTable();

        setBackground(new java.awt.Color(153, 255, 255));
        setMinimumSize(new java.awt.Dimension(980, 589));

        jLabel1.setText("¿Cuantos tiempos de llegada?");

        jLabel2.setText("¿Cuantos tiempos de servicio?");

        jButton1.setText("Llenar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Volver");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Limpiar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Aceptar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        tableTELL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tiempos de llegada", "Probabilidades"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableTELL);
        if (tableTELL.getColumnModel().getColumnCount() > 0) {
            tableTELL.getColumnModel().getColumn(0).setResizable(false);
            tableTELL.getColumnModel().getColumn(1).setResizable(false);
        }

        tableTS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tiempos de Servicio", "Probabilidades"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableTS);
        if (tableTS.getColumnModel().getColumnCount() > 0) {
            tableTS.getColumnModel().getColumn(0).setResizable(false);
            tableTS.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField2))
                                .addGap(34, 34, 34)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(323, 323, 323)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(23, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        tell=(DefaultTableModel)this.tableTELL.getModel();
        tss=(DefaultTableModel)this.tableTS.getModel();
        jTextField1.setText("");
        jTextField2.setText("");
        if (tell.getRowCount()!=0) {
            for (int i = tell.getRowCount()-1; i >= 0; i--) {
                tell.removeRow(i);
            }
        }
        if (tss.getRowCount()!=0) {
            for (int i = tss.getRowCount()-1; i >= 0; i--) {
                tss.removeRow(i);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if ((jTextField1.getText()==null)||(jTextField2.getText()==null)) {
            JOptionPane.showMessageDialog(null, "Tiene que llenar ambos campos");
        }else{
            for (int x = 0; x <Integer.parseInt(jTextField1.getText());x++)
                tell.addRow(new Object[Integer.parseInt(jTextField1.getText())]);        
            for (int x = 0; x <Integer.parseInt(jTextField2.getText());x++)
                tss.addRow(new Object[Integer.parseInt(jTextField2.getText())]);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if((tell.getRowCount()==0)||(tss.getRowCount()==0)){
            JOptionPane.showMessageDialog(null, "Tienes que asignar cantidad de tiempos para llegada y servicio");
        }else{
            if((comprobar(tell))&&(comprobar(tss))){
                Integer numero=Integer.parseInt(jTextField1.getText());
                Inicio.llegadas= new Probabilidades(numero);
                for (int i = 0; i < tell.getRowCount(); i++) {
                    Inicio.llegadas.setTiempo( (int)tell.getValueAt(i, 0), (float)tell.getValueAt(i, 1), i);
                }
               Inicio.llegadas.completacion();
                Integer numero2=Integer.parseInt(jTextField2.getText());
                Inicio.servicios= new Probabilidades(numero2);
                for (int i = 0; i < tss.getRowCount(); i++) {
                    Inicio.servicios.setTiempo( (int)tss.getValueAt(i, 0), (float)tss.getValueAt(i, 1), i);
                }
               Inicio.servicios.completacion();
               escribir();
               DecisionArchivo pantalla = new DecisionArchivo();
               pantalla.setSize(980, 589);
                pantalla.setLocation(0, 0);
                removeAll();
                add(pantalla,BorderLayout.CENTER);
                revalidate();
                repaint();
            }else{
                JOptionPane.showMessageDialog(null, "La suma de suma de las probabilidades de cada tabla tiene que ser cada una 1");
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        CrearArchivo p2 = new CrearArchivo();
        p2.setSize(980, 589);
        p2.setLocation(0, 0);
        removeAll();
        add(p2, BorderLayout.CENTER);
        revalidate();
        repaint();
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTable tableTELL;
    private javax.swing.JTable tableTS;
    // End of variables declaration//GEN-END:variables
    public boolean comprobar(DefaultTableModel actual){
        int filas=actual.getRowCount();
        float acumulador=0;
        try {
            for (int i = 0; i < filas; i++) {
                acumulador= acumulador + (float)actual.getValueAt(i, 1);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Todos los campos deben llenarse");
            e.printStackTrace();
        }
        
        JOptionPane.showMessageDialog(null, acumulador);
        if(acumulador==1){
            return true;
        }else{
            return false;
        }
        
    }
    public void escribir(){
        String directorio = System.getProperty("user.dir");
        FileWriter fichero = null;
        PrintWriter pw = null;
        try
        {
            fichero = new FileWriter(directorio+"/Datos.txt");
            pw = new PrintWriter(fichero);

            pw.println(String.valueOf(Inicio.nServs));
            pw.println(String.valueOf(Inicio.tiempo));
            pw.println(String.valueOf(tell.getRowCount()));
            for (int i = 0; i < tell.getRowCount(); i++) {
                pw.println(String.valueOf((int)tell.getValueAt(i, 0)));
                pw.println(String.valueOf((float)tell.getValueAt(i, 1)));
            }
            pw.println(String.valueOf(tss.getRowCount()));
            for (int i = 0; i < tss.getRowCount(); i++) {
                pw.println(String.valueOf((int)tss.getValueAt(i, 0)));
                pw.println(String.valueOf((float)tss.getValueAt(i, 1)));
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }
    }
}
