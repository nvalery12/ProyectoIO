/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulacion;

/**
 *
 * @author Noel Roberto
 */
public class Reporte extends javax.swing.JPanel {

    /**
     * Creates new form Reporte
     */
    public Reporte() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public Integer cantidadClientesNoEsperan(){
        Integer clientes=0;
        for (Renglon e : Inicio.renglones) {
            for (int i = 0; i < e.getsS().length; i++) {
                if (e.getCliente()==e.getSSPosi(i)) {
                    clientes++;
                }
            }
        }
        return clientes;
    }
    
    public Integer clientesSinSerAtendidos(){
        return Inicio.renglones.get(Inicio.renglones.size()-1).getwL();
    }
    public float clientesQueEsperaron(){
        int clientes=0;
        int clientWL=0;
        int tmA=0;
        int wL=0;
        char l='n';
        
        for (Renglon renglone : Inicio.renglones) {
            if(renglone.getTipo()=='l'){
                clientes++;
            }
            if ((renglone.getNum()!=0)&&(renglone.getNum()!=1)) {
                boolean bandera=false;
                for (int i = 0; i < renglone.getsS().length; i++) {
                    if(renglone.getCliente()==renglone.getSSPosi(i)){
                        bandera=true;
                        break;
                    }
                }
                if(!bandera){
                    clientWL++;
                }
                if((l=='l')&&(renglone.gettM()==tmA)&&(renglone.getwL()==0)&&(wL==1)){
                    clientWL--;
                }
            }
            tmA=renglone.gettM();
            wL=renglone.getwL();
            l=renglone.getTipo();
        }
        return (clientWL/clientes);
    }
    
    public float clientesPromedioSistema(){
        int maximo=0;
        for (Renglon renglone : Inicio.renglones) {
            if(maximo<renglone.getcSistema()){
                maximo=renglone.getcSistema();
            }
        }
        int acumulador1=0;
        for (int i = maximo; i > 0; i--) {
            int acumulador2=0;
            int tiempoCuandoSeLlegoALaCantidad=0;
            boolean bandera=false;
            for (Renglon renglone : Inicio.renglones) {
                if((!bandera)&&(renglone.getcSistema()==i)){
                    tiempoCuandoSeLlegoALaCantidad=renglone.gettM();
                    bandera=true;
                }
                if((bandera)&&(renglone.getcSistema()!=i)){
                    acumulador2=acumulador2+renglone.gettM()-tiempoCuandoSeLlegoALaCantidad;
                    bandera=false;
                }
            }
            acumulador1=acumulador1+(i*acumulador2);
        }
        int tiempo=Inicio.renglones.get(Inicio.renglones.size()-1).gettM();
        return acumulador1/tiempo;
    }
    public float clientesPromedioCola(){
        int maximo=0;
        for (Renglon renglone : Inicio.renglones) {
            if(maximo<renglone.getwL()){
                maximo=renglone.getwL();
            }
        }
        int acumulador1=0;
        for (int i = maximo; i > 0; i--) {
            int acumulador2=0;
            int tiempoCuandoSeLlegoALaCantidad=0;
            boolean bandera=false;
            for (Renglon renglone : Inicio.renglones) {
                if((!bandera)&&(renglone.getwL()==i)){
                    tiempoCuandoSeLlegoALaCantidad=renglone.gettM();
                    bandera=true;
                }
                if((bandera)&&(renglone.getwL()!=i)){
                    acumulador2=acumulador2+renglone.gettM()-tiempoCuandoSeLlegoALaCantidad;
                    bandera=false;
                }
            }
            acumulador1=acumulador1+(i*acumulador2);
        }
        int tiempo=Inicio.renglones.get(Inicio.renglones.size()-1).gettM();
        return acumulador1/tiempo;
    }
    
    public float []promedioUsoServidor(){
        float []promedios=new float[Inicio.nServs];
        Integer []tiempo_uso_sev= new Integer[Inicio.nServs];
        for (int i = 0; i < Inicio.nServs; i++) {
            tiempo_uso_sev[i]=0;
        }
        int momentoInicial=0;
        for (int i = 0; i < Inicio.nServs; i++) {
            for (Renglon renglone : Inicio.renglones) {
                if (renglone.getCliente()==9999) {
                    tiempo_uso_sev[i]=tiempo_uso_sev[i]+renglone.gettM()-momentoInicial;
                    momentoInicial=0;
                } 
                if((renglone.getCliente()!=9999)&&(momentoInicial==0)){
                    momentoInicial=renglone.gettM();
                }
            }
            promedios[i]=tiempo_uso_sev[i]/Inicio.renglones.get(Inicio.renglones.size()-1).gettM();
        }
        return promedios;
    }
    public float promedioUsoSistema(){
        float []promedios=new float[Inicio.nServs];
        Integer []tiempo_uso_sev= new Integer[Inicio.nServs];
        for (int i = 0; i < Inicio.nServs; i++) {
            tiempo_uso_sev[i]=0;
        }
        int momentoInicial=0;
        float tiempoUsoTotal=0;
        for (int i = 0; i < Inicio.nServs; i++) {
            for (Renglon renglone : Inicio.renglones) {
                if ((renglone.getCliente()==9999)&&(momentoInicial!=0)) {
                    tiempo_uso_sev[i]=tiempo_uso_sev[i]+renglone.gettM()-momentoInicial;
                    momentoInicial=0;
                } 
                if((renglone.getCliente()!=9999)&&(momentoInicial==0)){
                    momentoInicial=renglone.gettM();
                }
            }
            promedios[i]=tiempo_uso_sev[i]/Inicio.renglones.get(Inicio.renglones.size()-1).gettM();
            tiempoUsoTotal=tiempoUsoTotal+tiempo_uso_sev[i];
        }
        float prom=0;
        for (int i = 0; i < Inicio.nServs; i++) {
            prom=prom+promedios[i];
        }
        tiempoUsoTotal=tiempoUsoTotal/(Inicio.nServs);
        return prom/Inicio.nServs;
        
    }
}
